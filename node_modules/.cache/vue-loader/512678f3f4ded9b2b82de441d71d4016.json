{"remainingRequest":"/Users/Berni/Desktop/T3-IIC3103-mbvanwersch/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/Berni/Desktop/T3-IIC3103-mbvanwersch/src/App.vue?vue&type=style&index=1&lang=css&","dependencies":[{"path":"/Users/Berni/Desktop/T3-IIC3103-mbvanwersch/src/App.vue","mtime":1589644401721},{"path":"/Users/Berni/Desktop/T3-IIC3103-mbvanwersch/node_modules/css-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/Berni/Desktop/T3-IIC3103-mbvanwersch/node_modules/vue-loader/lib/loaders/stylePostLoader.js","mtime":499162500000},{"path":"/Users/Berni/Desktop/T3-IIC3103-mbvanwersch/node_modules/postcss-loader/src/index.js","mtime":499162500000},{"path":"/Users/Berni/Desktop/T3-IIC3103-mbvanwersch/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/Berni/Desktop/T3-IIC3103-mbvanwersch/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:CgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgouc21hbGwgewogIG1heC13aWR0aDogNjAwcHg7CiAgbWFyZ2luOiAxNTBweCBhdXRvOwp9Cg=="},{"version":3,"sources":["App.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAsRA;AACA;AACA;AACA","file":"App.vue","sourceRoot":"src","sourcesContent":["<style>\nh1   {\n      font-family:Optima;\n      text-align:center;\n      background-color:#adebeb;\n      padding: 30px;\n      font-size: 230%;\n      position: fixed;\n      width: 100%;\n     }\nh2   {\n      font-family:Optima;\n      text-align:center;\n     }\nh3   {\n      font-family:Optima;\n     }\nul {\n    font-family:Optima;\n    display: inline;\n    background-color:#adebeb;\n    list-style-type: none;\n    margin: 0;\n    padding: 1px;\n    overflow: hidden;\n    position: fixed;\n    top: 0;\n    width: 100%;\n   }\n\ntr {\n    font-family:Optima;\n}\n\nbody, html {\n    margin-left:3%;\n    margin-right:3%;\n}\n\nbutton {\n  font-family:Optima;\n  background-color: #adebeb;\n  text-align: center;\n  border: none;\n  text-decoration: none;\n  display: inline-block;\n  font-size: 16px;\n}\n\nli {\n  display: inline;\n  font-family:Optima;\n  font-size: 16px;\n  text-decoration: none;\n  float: left;\n  padding: 20px;\n  background-color: #adebeb;\n}\n\nsmall {\n  max-width: 300px;\n  margin: 150px auto;\n}\n\n</style>\n\n<template>\n  <div id=\"app\">\n\n  <ul>\n    <li style=\"font-size: 20px;\" ><b>Información bursátil en vivo </b></li>\n    <li>|</li>\n    <li>Estado: {{ estado }}</li>\n    <li>|</li>\n    <li v-if=\"estado == 'Desconectado'\"><button v-on:click=\"conectar\">Conectar</button><br/></li>\n    <li v-else><button v-on:click=\"desconectar\">Desconectar</button><br/></li>\n  </ul>\n\n    <br>\n    <br>\n    <br>\n    <h2>Acciones</h2>\n      <table>\n        <tbody>\n          <template v-for=\"(key, value) in stocks_dictionary\">\n            <h3>{{ key.nombre }}</h3>\n            <tr><td>Ticker: {{ value }}</td></tr>\n            <tr><td>País de origen: {{ key.pais }}</td></tr>\n            <tr><td>Volumen total transado: {{ key.volumen_total }}</td></tr>\n            <tr><td>Alto histórico: ${{ key.alto_historico }}</td></tr>\n            <tr><td>Bajo histórico: ${{ key.bajo_historico }}</td></tr>\n            <tr><td>Último precio: ${{ key.ultimo_precio }}</td></tr>\n            <tr><td>Variación porcentual: {{ key.variacion_porcentual }}%</td></tr>\n            <br>\n            <br>\n          </template>\n        </tbody>\n      </table>\n\n    <hr>\n    <h2>Mercados de valores</h2>\n      <table>\n        <tbody>\n          <template v-for=\"(key, value) in exchange_dictionary\">\n            <h3>{{ key.nombre }}</h3>\n            <tr><td>Sigla: {{ key.sigla }}</td></tr>\n            <tr><td>Volumen compra: {{ key.volumen_compra }}</td></tr>\n            <tr><td>Volumen venta: {{ key.volumen_venta }}</td></tr>\n            <tr><td>Volumen total: {{ key.volumen_total }}</td></tr>\n            <tr><td>Cantidad de acciones: {{ key.cant_acciones }}</td></tr>\n            <tr><td>Participación de mercado: {{ key.part_mercado }}%</td></tr>\n            <br>\n            <br>\n          </template>\n        </tbody>\n      </table>\n  </div>\n</template>\n\n\n<script>\nimport io from \"socket.io-client\";\nimport LineChart from \"../LineChart.js\";\n\nvar socket = io.connect('wss://le-18262636.bitzonte.com', {\n    path: '/stocks'\n});\n\nexport default {\n  name: 'app',\n  components: {\n    LineChart\n  },\n  data: function() {\n    return {\n      estado: 'Conectado',\n      stocks_dictionary: {},\n      exchange_dictionary: {},\n      nombre_sigla_stock: {},\n      stock_exchange: {},\n      volumen_total_mercados: 0,\n      datacollection: {}\n    }\n  },\n\n  created() {\n      console.log(\"Estoy conectado\");\n      socket.emit('STOCKS'),\n      socket.emit('EXCHANGES'),\n\n      socket.on('STOCKS', (data) => {\n        console.log(data);\n        for (const m of data) {\n            //console.log(m);\n            this.$set(this.stocks_dictionary, m.ticker, {volumen_total: 0, alto_historico: 0, bajo_historico: 0, ultimo_precio: 0, variacion_porcentual: 0, nombre: m.company_name, pais: m.country})\n            //console.log(this.stocks_dictionary);\n            this.$set(this.nombre_sigla_stock, m.company_name, m.ticker)\n            //console.log(this.nombre_sigla_stock);\n            this.$set(this.datacollection, m.ticker, []);\n        }\n        console.log(this.stocks_dictionary);\n      }),\n\n      socket.on('EXCHANGES', (data) => {\n        console.log(data);\n        for (var key in data) {\n            this.$set(this.exchange_dictionary, key, {sigla: key, nombre: data[key]['name'], volumen_compra: 0, volumen_venta: 0, volumen_total: 0, cant_acciones: data[key]['listed_companies'].length, part_mercado: 0, acciones: Array()})\n            var index = 0;\n            while (index < data[key]['listed_companies'].length) {\n              this.exchange_dictionary[key]['acciones'].push(this.nombre_sigla_stock[data[key]['listed_companies'][index]]);\n              this.$set(this.stock_exchange, this.nombre_sigla_stock[data[key]['listed_companies'][index]], key)\n              index++;\n            }\n            //console.log(this.exchange_dictionary);\n            //console.log(this.stock_exchange);\n        }\n        console.log(this.exchange_dictionary);\n      }),\n\n      this.getRealtimeData()\n  },\n\n  methods: {\n    getRealtimeData() {\n        socket.on('UPDATE', (data) => {\n          console.log(data);\n          console.log(data.ticker, ' UPDATE: value ', data.value);\n          if (data.ticker in this.stocks_dictionary) {\n            const precio_anterior = this.stocks_dictionary[data.ticker]['ultimo_precio'];\n            //console.log(this.stocks_dictionary[data.ticker]);\n            //console.log(\"Actualizo el valor\");\n            this.$set(this.stocks_dictionary[data.ticker], 'ultimo_precio', data.value)\n            //this.stocks_dictionary[data.ticker]['ultimo_precio'] = data.value;\n            //console.log(this.stocks_dictionary[data.ticker]);\n            if (this.stocks_dictionary[data.ticker]['bajo_historico'] == 0) {\n              //console.log(\"Actualizo el menor por primera vez\");\n              this.$set(this.stocks_dictionary[data.ticker], 'bajo_historico', data.value)\n              //this.stocks_dictionary[data.ticker].bajo_historico = data.value;\n            }\n            if (data.value < this.stocks_dictionary[data.ticker]['bajo_historico']) {\n              //console.log(\"Actualizo el menor\");\n              this.$set(this.stocks_dictionary[data.ticker], 'bajo_historico', data.value)\n              //this.stocks_dictionary[data.ticker].bajo_historico = data.value;\n            }\n            if (data.value > this.stocks_dictionary[data.ticker]['alto_historico']) {\n              //console.log(\"Actualizo el mayor\");\n              this.$set(this.stocks_dictionary[data.ticker], 'alto_historico', data.value)\n              //this.stocks_dictionary[data.ticker].alto_historico = data.value;\n            }\n            if (precio_anterior != 0) {\n              this.$set(this.stocks_dictionary[data.ticker], 'variacion_porcentual', (data.value - precio_anterior)*100 / precio_anterior)\n              //this.stocks_dictionary[data.ticker]['variacion_porcentual'] = (data.value - precio_anterior)*100 / precio_anterior;\n            }\n            //console.log(this.stocks_dictionary[data.ticker]);\n            this.datacollection[data.ticker].push([data.value, data.timestamp]);\n            console.log(this.datacollection);\n          }\n        }),\n\n        socket.on('BUY', (data) => {\n          //console.log(data.ticker, ' BUY: volume ', data.volume);\n          if (data.ticker in this.stocks_dictionary) {\n            //console.log(this.stocks_dictionary[data.ticker]);\n            this.$set(this.stocks_dictionary[data.ticker], 'volumen_total', this.stocks_dictionary[data.ticker]['volumen_total'] + data.volume)\n            //this.stocks_dictionary[data.ticker]['volumen_total'] = this.stocks_dictionary[data.ticker]['volumen_total'] + data.volume;\n            //console.log(\"Actualizo el volumen\");\n            //console.log(this.stocks_dictionary[data.ticker]);\n          }\n          if (data.ticker in this.stock_exchange) {\n            this.$set(this.exchange_dictionary[this.stock_exchange[data.ticker]], 'volumen_compra', this.exchange_dictionary[this.stock_exchange[data.ticker]]['volumen_compra'] + data.volume)\n            //this.exchange_dictionary[this.stock_exchange[data.ticker]]['volumen_compra'] = this.exchange_dictionary[this.stock_exchange[data.ticker]]['volumen_compra'] + data.volume;\n            this.$set(this.exchange_dictionary[this.stock_exchange[data.ticker]], 'volumen_total', this.exchange_dictionary[this.stock_exchange[data.ticker]]['volumen_total'] + data.volume)\n            //this.exchange_dictionary[this.stock_exchange[data.ticker]]['volumen_total'] = this.exchange_dictionary[this.stock_exchange[data.ticker]]['volumen_total'] + data.volume;\n            this.volumen_total_mercados = this.volumen_total_mercados + data.volume;\n            this.$set(this.exchange_dictionary[this.stock_exchange[data.ticker]], 'part_mercado', this.exchange_dictionary[this.stock_exchange[data.ticker]]['volumen_total']*100 / this.volumen_total_mercados)\n            //this.exchange_dictionary[this.stock_exchange[data.ticker]]['part_mercado'] = this.exchange_dictionary[this.stock_exchange[data.ticker]]['volumen_total']*100 / this.volumen_total_mercados;\n            //console.log(this.exchange_dictionary[this.stock_exchange[data.ticker]]);\n          }\n        }),\n\n        socket.on('SELL', (data) => {\n           //console.log(data.ticker, ' SELL: volume ', data.volume);\n           if (data.ticker in this.stocks_dictionary) {\n             //console.log(this.stocks_dictionary[data.ticker]);\n             this.$set(this.stocks_dictionary[data.ticker], 'volumen_total', this.stocks_dictionary[data.ticker]['volumen_total'] + data.volume)\n             //this.stocks_dictionary[data.ticker]['volumen_total'] = this.stocks_dictionary[data.ticker]['volumen_total'] + data.volume;\n             //console.log(\"Actualizo el volumen\");\n             //console.log(this.stocks_dictionary[data.ticker]);\n           }\n           if (data.ticker in this.stock_exchange) {\n             this.$set(this.exchange_dictionary[this.stock_exchange[data.ticker]], 'volumen_venta', this.exchange_dictionary[this.stock_exchange[data.ticker]]['volumen_venta'] + data.volume)\n             //this.exchange_dictionary[this.stock_exchange[data.ticker]]['volumen_venta'] = this.exchange_dictionary[this.stock_exchange[data.ticker]]['volumen_venta'] + data.volume;\n             this.$set(this.exchange_dictionary[this.stock_exchange[data.ticker]], 'volumen_total', this.exchange_dictionary[this.stock_exchange[data.ticker]]['volumen_total'] + data.volume)\n             //this.exchange_dictionary[this.stock_exchange[data.ticker]]['volumen_total'] = this.exchange_dictionary[this.stock_exchange[data.ticker]]['volumen_total'] + data.volume;\n             this.volumen_total_mercados = this.volumen_total_mercados + data.volume;\n             this.$set(this.exchange_dictionary[this.stock_exchange[data.ticker]], 'part_mercado', this.exchange_dictionary[this.stock_exchange[data.ticker]]['volumen_total']*100 / this.volumen_total_mercados)\n             //this.exchange_dictionary[this.stock_exchange[data.ticker]]['part_mercado'] = this.exchange_dictionary[this.stock_exchange[data.ticker]]['volumen_total']*100 / this.volumen_total_mercados;\n             //console.log(this.exchange_dictionary[this.stock_exchange[data.ticker]]);\n           }\n        })\n    },\n\n    conectar: function (event) {\n      socket.connect();\n      this.estado = 'Conectado';\n      console.log(\"Me conecté\");\n    },\n\n    desconectar: function (event) {\n      socket.disconnect();\n      this.estado = 'Desconectado';\n      console.log(\"Me deconecté\");\n    }\n  }\n};\n</script>\n\n<style>\n.small {\n  max-width: 600px;\n  margin: 150px auto;\n}\n</style>\n"]}]}